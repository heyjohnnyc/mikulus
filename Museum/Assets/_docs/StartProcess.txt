Program that starts WINWORD.EXE [C#]
using System.Diagnostics;

class Program
{
    static void Main()
    {
	LaunchCommandLineApp();
    }

    /// <summary>
    /// Launch the legacy application with some options set.
    /// </summary>
    static void LaunchCommandLineApp()
    {
	// For the example
	const string ex1 = "C:\\";
	const string ex2 = "C:\\Dir";

	// Use ProcessStartInfo class
	ProcessStartInfo startInfo = new ProcessStartInfo();
	startInfo.CreateNoWindow = false;
	startInfo.UseShellExecute = false;
	startInfo.FileName = "dcm2jpg.exe";
	startInfo.WindowStyle = ProcessWindowStyle.Hidden;
	startInfo.Arguments = "-f j -o \"" + ex1 + "\" -z 1.0 -s y " + ex2;

	try
	{
	    // Start the process with the info we specified.
	    // Call WaitForExit and then the using statement will close.
	    using (Process exeProcess = Process.Start(startInfo))
	    {
		exeProcess.WaitForExit();
	    }
	}
	catch
	{
	    // Log error.
	}
    }
}



Program that redirects standard output [C#]

using System;
using System.Diagnostics;
using System.IO;

class Program
{
    static void Main()
    {
	//
	// Setup the process with the ProcessStartInfo class.
	//
	ProcessStartInfo start = new ProcessStartInfo();
	start.FileName = @"C:\7za.exe"; // Specify exe name.
	start.UseShellExecute = false;
	start.RedirectStandardOutput = true;
	//
	// Start the process.
	//
	using (Process process = Process.Start(start))
	{
	    //
	    // Read in all the text from the process with the StreamReader.
	    //
	    using (StreamReader reader = process.StandardOutput)
	    {
		string result = reader.ReadToEnd();
		Console.Write(result);
	    }
	}
    }
}


Program that calls 7-Zip executable [C#]

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics;

class Program
{
    static void Main()
    {
	string sourceName = "ExampleText.txt";
	string targetName = "Example.gz";

	// 1
	// Initialize process information.
	//
	ProcessStartInfo p = new ProcessStartInfo();
	p.FileName = "7za.exe";

	// 2
	// Use 7-zip
	// specify a=archive and -tgzip=gzip
	// and then target file in quotes followed by source file in quotes
	//
	p.Arguments = "a -tgzip \"" + targetName + "\" \"" + sourceName + "\" -mx=9";
	p.WindowStyle = ProcessWindowStyle.Hidden;

	// 3.
	// Start process and wait for it to exit
	//
	Process x = Process.Start(p);
	x.WaitForExit();
    }
}

Using Kill method on process type [C#]

using System.Diagnostics;
using System.Threading;

class Program
{
    static void Main()
    {
	// Start notepad.
	Process process = Process.Start("notepad.exe");
	// Wait one second.
	Thread.Sleep(1000);
	// End notepad.
	process.Kill();
    }
}

